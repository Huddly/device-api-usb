# This workflow will run build the typescript source files, run linter and prettier
name: CI Check

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - '*'
  schedule:
    # Trigger workflow run every workday (Mon-Fri) at 0700
    - cron:  '0 7 * * 1,2,3,4,5'

jobs:
  build:
    name: "Build & Test"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [
          ubuntu-18.04,
          macos-latest,
          windows-latest
        ]
        node-version: [
          11,
          12,
          14,
          16
        ]
    env:
      AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER }}
      AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}

    steps:
      - name: Set git to use LF
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout repo and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: "Pre-Install hook Ubuntu"
        if: matrix.os == 'ubuntu-18.04'
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install -y gcc-8 g++-8
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 60
          sudo apt install libudev-dev

      - name: "Install python2.7 on windows"
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v2
        with:
          python-version: 2.7

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: "Build (Win)"
        if: matrix.os == 'windows-latest' && matrix.node-version >= 14
        run: |
          npm install --vs2015 --add-python-to-path='true' --debug --global --production windows-build-tools
          npm ci
          npm run tslint
          npm run prettier-check
          npm run napi-64
          npm run napi-32
          npm run test
          npm run audit-check

      - name: "Build (Win) Node 11 & 12"
        if: matrix.os == 'windows-latest' && matrix.node-version < 14
        run: |
          npm install --vs2015 --add-python-to-path='true' --debug --global --production windows-build-tools
          npm ci
          npm run tslint
          npm run prettier-check
          npx prebuildify --napi --debug --verbose --target=node@10.12.0 --target=node@12.4.0 --target=electron@11.2.1 --arch=x64
          npx prebuildify --napi --debug --verbose --target=node@10.12.0 --target=node@12.4.0 --target=electron@11.2.1 --arch=ia32
          npm run test
          npm run audit-check

      - name: "Build & Test (OSX & Linux)"
        if: matrix.os != 'windows-latest'
        run: |
          npm ci
          npm run tslint
          npm run prettier-check
          npm run build
          npm test
          npm run audit-check

      - name: "Extract and export RELEASE_VERSION"
        if: success() && startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          export REF="${{github.ref}}"
          echo "RELEASE_VERSION=${REF#refs/*/}" >> $GITHUB_ENV

      - name: "Extract and export GITSHA"
        if: success()
        shell: bash
        run: |
          export GITSHA=$(git log --pretty=format:'%H' -n 1 .)
          echo "GITSHA=${GITSHA}" >> $GITHUB_ENV

      - name: "Upload Binaries to azure"
        if: success() && matrix.os == 'windows-latest'
        env:
          TAG: ${{ env.RELEASE_VERSION }}
          GITSHA: ${{ env.GITSHA }}
        shell: bash
        run: npm run upload-binaries

      - name: "Upload Binaries to azure"
        if: success() && matrix.os != 'windows-latest'
        env:
          TAG: ${{ env.RELEASE_VERSION }}
          GITSHA: ${{ env.GITSHA }}
        run: npm run upload-build


  slack-notify:
    name: "Notify Failure"
    runs-on: ubuntu-latest
    needs: [ build ]
    if: always() && (needs.build.result == 'failure') && (github.ref == 'refs/heads/master')
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: sdk
          SLACK_COLOR: "#ff5050"
          SLACK_ICON: https://www.huddly.com/content/uploads/2018/10/huddly-logo-white-300x300.png?size=48
          SLACK_MESSAGE: 'device-api-usb pipeline failed on master! Attention needed.'
          SLACK_TITLE: Build Failed!
          SLACK_USERNAME: "Github Actions"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}